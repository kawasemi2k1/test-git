#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define Max 15

int *createArray(int size)
{
  int *a;int i;
  srand((int)time(0));
  a=(int*)malloc(size*sizeof(int));
  for(i=0;i<size;i++)
    *(a+i)=rand()%10;
  return a;
}


int int_compare(void const* x,void const *y)
{
  int m,n;
  m=*((int*)x);
  n=*((int*)y);
  if(m==n) return 0;
  return m>n ? 1: -1;
}
/*
void sapXep(void* buf,int n,int sizePhanTu,int (*int_compare)( void const*x, void const *y))
{
  int i,j;
  void next;
  for(i=1;i<n;i++)
    {
      next =*(buf+i*sizePhanTu);
      for(j=i-1;j>=0&&(int_compare(next,*(buf+j*sizePhanTu))<1);j--)
	*(buf+j+1)=*(buf+j);
      *(buf+j+1)=next;
    }
}
*/
void SWAP(void *a, void *b)
{
  void temp;
  temp=*a;
  *a=*b;
  *b=temp;
}


void quickSort(void* list, int left, int right,int sizePhanTu,int (*int_compare)( void const*x, void const *y))
{
  int pivot, i, j;
  if(left < right)
    {
      i = left;
      j = right+1;
      pivot = list+left*sizePhanTu;
      do
	{
	  do i++; while(int_compare(list+i*sizePhanTu,&pivot)<0);
	  do j--; while(int_compare(list+j*sizePhanTu,&pivot)>0);
	  if (i < j) SWAP(list+i*sizePhanTu,list+j*sizePhanTu);
	} while (i < j);
      SWAP(list+left*sizePhanTu,list+j*sizePhanTu);
      quickSort(list, left, j-1,sizePhanTu,int_compare);
      quickSort(list, j+1, right,sizePhanTu,int_compare);
    }
}

int main()
{
  int *a;
  a=createArray(Max);
  for(i=0;i<Max;i++)
    print("%d\n",a[i]);
  quickSort(a,0,Max-1,sizeof(int),int_compare);
  
  for(i=0;i<Max;i++)
    print("%d\n",a[i]);
}
